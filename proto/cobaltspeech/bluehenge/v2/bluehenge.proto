// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package cobaltspeech.bluehenge.v2;

import "cobaltspeech/diatheke/v3/diatheke.proto";

// Bluehenge is designed to help with maintainance and repair tasks.
// When paired with other cobalt offerings, it can provide a hands-free virtual assistant for technicians.
//
// Data is extracted from repair manuals and stored in a knowledge graph database.
// During the extraction process, links back to the original documents are created.
// Procedure data will include those links for convenience.
//
// Each manual may have a different structure, but generally uses groups of simple steps.
// Bluehenge assumes the following structure, which should be generic enough for most applications:
//     Procedures > Tasks > Steps.
// For example:
//     A Procedure would be a full service item, such as replacing an alternator.
//     A Task would be to remove the old alternator or install the new one.
//     A Step would be to remove the 4 bolts that mount the alternator.
//
// This API often referes to names and numbers for each procedure, task, and step.
// Procedure numbers are often in the form of Chapter.Section.  i.e. 4.2 or 4-2.
// Task numbers extend that the procedure number.  4.2.3 or 4-2-3.
// Steps are a simple count after the procedure number.  4.2.3 step #5.
// Because of the variety of user manuals, these names/numbers will all be treated as strings.
// Each application will be responsible for any string manipulation they need.

service BluehengeService {
  // Returns version information of the Bluehenge server.
  rpc Version(VersionRequest) returns (VersionResponse) {}

  // ListModels returns information about the Bluehenge models
  // the server can access.
  rpc ListModels(ListModelsRequest) returns (ListModelsResponse) {}

  // Create a new Bluehenge session. Also returns a list of
  // actions to take next.
  rpc CreateSession(CreateSessionRequest) returns (CreateSessionResponse) {}

  // Delete the session. Behavior is undefined if the given
  // TokenData is used again after this function is called.
  rpc DeleteSession(DeleteSessionRequest) returns (DeleteSessionResponse) {}

  // Process input for a session and get an updated session with
  // a list of actions to take next. This is the only method
  // that modifies the Bluehenge session state.
  rpc UpdateSession(UpdateSessionRequest) returns (UpdateSessionResponse) {}

  // Create an ASR stream. A result is returned when the
  // stream is closed by the client (which forces the ASR to
  // endpoint), or when a transcript becomes available on its
  // own, in which case the stream is closed by the server.
  // The ASR result may be used in the UpdateSession method.
  // <br/><br/>
  // If the session has a wakeword enabled, and the client
  // application is using Diatheke and Cubic to handle the
  // wakeword processing, this method will not return a
  // result until the wakeword condition has been satisfied.
  // Utterances without the required wakeword will be
  // ignored and no transcription will be returned.
  rpc StreamASR(stream StreamASRRequest) returns (StreamASRResponse) {}

  // Create a TTS stream to receive audio for the given reply.
  // The stream will close when TTS is finished. The client
  // may also close the stream early to cancel the speech
  // synthesis.
  rpc StreamTTS(StreamTTSRequest) returns (stream StreamTTSResponse) {}

  // Create an ASR stream for transcription. Unlike StreamASR,
  // Transcribe does not listen for a wakeword. This method
  // returns a bi-directional stream, and its intended use is
  // for situations where a user may say anything at all, whether
  // it is short or long, and the application wants to save the
  // transcript (e.g., take a note, send a message).
  // <br/><br/>
  // The first message sent to the server must be the TranscribeAction,
  // with remaining messages sending audio data.
  // Messages received from the server will include the current
  // best partial transcription until the full transcription is
  // ready. The stream ends when either the client application
  // closes it, a predefined duration of silence (non-speech)
  // occurs, or the end-transcription intent is recognized.
  rpc Transcribe(stream TranscribeRequest) returns (stream TranscribeResponse) {}

  // Returns a list of all the procedures.
  // This list is contains a simplified representation of the procedures,
  // which can be helpful for displaying a directory or table of contents.
  // The full details of an individual procedure can be retrieved via
  // GetProcedure.
  rpc ListProcedures(ListProceduresRequest) returns (ListProceduresResponse) {}

  // Returns a list of all the trees.
  // This list is contains a simplified representation of the trees,
  // which can be helpful for displaying a directory or table of contents.
  // The full details of an individual tree can be retrieved via GetTree.
  rpc ListTrees(ListTreesRequest) returns (ListTreesResponse) {}

  // Returns a list of all entities.
  // This list contains every entity in the knowledge graph and can
  // be used for fuzzy matching or any other time you need everything.
  rpc ListEntities(ListEntitiesRequest) returns (ListEntitiesResponse) {}

  // Gets a single procedure identified by id.
  // The response returns everything you should need to be able to display the
  // Procedure and it's Steps and Tasks to the user.
  rpc GetProcedure(GetProcedureRequest) returns (GetProcedureResponse) {}

  // Gets a single task identified by id.
  // The response returns everything you should need to be able to display the
  // Task and it's Steps to the user.
  rpc GetTask(GetTaskRequest) returns (GetTaskResponse) {}

  // Gets a single tree identified by id.
  // Trees contain instructions followed by questions to help users
  // diagnose problems. The answers at each step point to another
  // TreeNode to continue the diagnosis. This response returns an
  // information bearing Tree struct with a list of its TreeNodes in
  // a linear order starting with the first one the user should see.
  rpc GetTree(GetTreeRequest) returns (GetTreeResponse) {}

  // Saves a note in a specific step during a procedure.
  rpc SaveNote(SaveNoteRequest) returns (SaveNoteResponse) {}

  // Gets the data related with an entity extraction triple for a
  // specific entity-relation pair, e.g. entity:"sky", relation:"has color"
  // Extractions contain Subject-Relation-Object sets. For example,
  // entity:"sky", relation:"has color", object:"blue".
  rpc GetExtractionRelationship(GetExtractionRelationshipRequest) returns (GetExtractionRelationshipResponse) {}

  // Gets the data contained within a single entity identified by name.
  // Entities contain information about parts and other question
  // answering content. See Entity for more details.
  rpc GetEntity(GetEntityRequest) returns (GetEntityResponse) {}

  // Gets the data related with an image.
  // The actual image will be served over HTTP.
  rpc GetEntityImageData(GetEntityImageDataRequest) returns (GetEntityImageDataResponse) {}
}

// Empty request for Bluehenge Version
message VersionRequest {}

// Lists the version of the Bluehenge server.
message VersionResponse {
  // Version of the Bluehenge server/engine
  string bluehenge = 1;
  // Diatheke Version Response
  cobaltspeech.diatheke.v3.VersionResponse diatheke_version_response = 2;
  // The date when the source data was last updated.  Source data includes PDFs
  // and anything else used to populate the knowledge graph.  Updates to this
  // version imply a new version of knowledge_graph_version.
  string source_data_version = 3;
  // The build date of the knowledge graph in use.  The knowledge graph is
  // generated from the source data, but can be updated or modified multiple
  // times given the same source data, hence the separate version.
  string knowledge_graph_version = 4;
}

// The top-level message sent by the client for the `ListModels` method.
message ListModelsRequest {
  cobaltspeech.diatheke.v3.ListModelsRequest diatheke_list_models_request = 1;
}

// A list of models available on the Bluehenge server.
message ListModelsResponse {
  cobaltspeech.diatheke.v3.ListModelsResponse diatheke_list_models_response = 1;
}

// The top-level message sent by the client for the `CreateSession` method.
message CreateSessionRequest {
  cobaltspeech.diatheke.v3.CreateSessionRequest diatheke_create_session_request = 1;
}

// The top-level message sent by the server for the `CreateSession` method.
message CreateSessionResponse {
  cobaltspeech.diatheke.v3.CreateSessionResponse diatheke_create_session_response = 1;
}

// The top-level message sent by the client for the `DeleteSession` method.
message DeleteSessionRequest {
  cobaltspeech.diatheke.v3.DeleteSessionRequest diatheke_delete_session_request = 1;
}

// The top-level message sent by the server for the `DeleteSession` method.
message DeleteSessionResponse {
  cobaltspeech.diatheke.v3.DeleteSessionResponse diatheke_delete_session_response = 1;
}

// The top-level message sent by the client for the `UpdateSession` method.
message UpdateSessionRequest {
  cobaltspeech.diatheke.v3.UpdateSessionRequest diatheke_update_session_request = 1;
}

// The top-level message sent by the server for the `UpdateSession` method.
message UpdateSessionResponse {
  cobaltspeech.diatheke.v3.UpdateSessionResponse diatheke_update_session_response = 1;
}

// The top-level message sent by the client for the `StreamASR` method.
message StreamASRRequest {
  cobaltspeech.diatheke.v3.StreamASRRequest diatheke_stream_asr_request = 1;
}

// The top-level message sent by the server for the `StreamASR` method.
message StreamASRResponse {
  // could be streamASRresponse instead of data
  cobaltspeech.diatheke.v3.StreamASRResponse diatheke_stream_asr_response = 1;
}

// The top-level message sent by the client for the `StreamTTS` method.
message StreamTTSRequest {
  cobaltspeech.diatheke.v3.StreamTTSRequest diatheke_stream_tts_request = 1;
}

// The top-level message sent by the server for the `StreamTTS` method.
message StreamTTSResponse {
  bytes audio = 1;
}

// The top-level message sent by the client for the `Transcribe` method.
message TranscribeRequest {
  cobaltspeech.diatheke.v3.TranscribeRequest diatheke_transcribe_request = 1;
}

// The top-level message sent by the server for the `Transcribe` method.
message TranscribeResponse {
  cobaltspeech.diatheke.v3.TranscribeResponse diatheke_transcribe_response = 1;
}

// Request for a complete list of all procedures.
message ListProceduresRequest {}

// List of all procedures.
// Helpful for displaying a directory or table of contents.
message ListProceduresResponse {
  // List of individual procedures. For efficiency, does not
  // return all the information for each step, just the high-level details.
  repeated ProcedureLite procedures = 1;
}

// Request for a complete list of all trees.
message ListTreesRequest {}

// List of all trees.
// Helpful for displaying a directory or table of contents.
message ListTreesResponse {
  // List of individual trees. For efficiency, does not
  // return all the information for each step, just the high-level details.
  repeated TreeLite trees = 1;
}

// Input to get a single procedure by its id.
message GetProcedureRequest {
  // name to identify a single procedure
  string name = 1;
}

// Returns all data related to a single procedure.
message GetProcedureResponse {
  // Individual procedure requested.
  Procedure procedure = 1;
}

// Input to get a single task by its id.
message GetTaskRequest {
  // knowledge graph ID that uniquely identifies a single task
  string id = 1;
}

// Returns all data related to a single task.
message GetTaskResponse {
  // Individual task requested.
  Task task = 1;
}

// Input to get a single tree by its id.
message GetTreeRequest {
  // name to identify a single tree
  string name = 1;
}

// Returns all data related to a single tree.
message GetTreeResponse {
  // Individual tree requested.
  Tree tree = 1;
}

// A simplified representation of a procedure.
// See Procedure for full details of a procedure.
//
// ProcedureLite is useful for getting a full list of all procedures
// without getting all of the underlying data related to all tasks and steps.
message ProcedureLite {
  // Unique ID of the procedure
  string id = 1;
  // User facing name of the procedure
  string procedure_name = 2;
  // Information related to where the Procedure is in the manual PDF used to generate the data.
  string page = 3;
  // Number of the procedure, as defined by the manual.
  string procedure_number = 4;
  // Information related to the tasks related to the procedure.
  repeated TaskLite tasks = 5;
}

// A simplified representation of a task.
// Useful for getting a full list of all Tasks without
// getting all of the underlying data related to the steps.
message TaskLite {
  // Unique ID of the task
  string id = 1;
  // User facing name of the task
  string task_name = 2;
  // Number of the task, as defined by the manual.
  string task_number = 3;
}

// A simplified representation of a tree.
// See Tree for full details of a tree.
//
// TreeLite is useful for getting a full list of all trees
// without getting all of the underlying data related to its TreeNodes.
message TreeLite {
  // Unique ID of the tree
  string id = 1;
  // User facing name of the tree
  string tree_name = 2;
  // Number of the tree, as defined by the manual.
  string tree_number = 3;
}

// Full representation of a procedure, including all sub tasks and steps.
// See also ProcedureLite.
message Procedure {
  // Unique ID of the procedure
  string id = 1;
  // User facing name of the procedure
  string name = 2;
  // Number of the procedure, as defined by the manual.
  string procedure_number = 3;
  // AdditionalNames of the task
  // Other ways to  refer to the Procedure.
  repeated string additional_names = 4;
  // A caution that the user should hear before starting work
  string prerequisites_warning_text = 5;
  // List of all Tasks inside of a procedure.
  repeated Task tasks = 6;
}

// Data of a task within a procedure
message Task {
  // Unique ID of the task
  string id = 1;
  // User facing name of the task
  string task_name = 2;
  // Number of the task, as defined by the manual.
  string task_number = 3;
  // AdditionalNames of the task
  // Other ways to  refer to the task. See comment in `Procedure`
  repeated string additional_names = 4;
  // WarningText of the task
  // A specific warning before starting the task
  string warning_text = 5;
  // List of steps of the task
  repeated StepData steps = 6;
}

// Data of a step within a task
message StepData {
  // Unique ID of the step
  string id = 1;
  // Instructions of the step, pulled directly from the manual.
  string instruction_text = 2;
  // Summary of the step, helpful for giving a shorter summary of the instruction_text.
  // Not always populated.  When not populated, instruction_text should be used.
  string summary_text = 3;
  // DisplayLabelText of the step
  string person = 4;
  // Number of the Task to which this step belongs.
  string task_number = 5;
  // Number of the task, as defined by the manual.
  string step_number = 6;
  // Page number the step is located at in the pdf.
  string page = 7;
  // the type of the step (instruction, warning, step, note). For TTS.
  string segment_type = 8;
  // Image of the step
  // A URL or relative path to where the multiple media is stored
  repeated string image = 9;
  // The parts mentioned in the step
  repeated string parts = 11;
  // List of notes of the step
  // User defined notes associated with this specific step
  repeated Note notes = 10;
}

// Representation of the root node of a troubleshooting Tree.
// Contains general information about tree and all child nodes.
message Tree {
  // Unique ID of the tree
  string id = 1;
  // User facing name of the tree
  string tree_name = 2;
  // Number of the tree, as defined by the manual.
  string tree_number = 3;
  // AdditionalNames of the task
  // Other ways to refer to the tree.
  repeated string additional_names = 4;
  // A caution that the user should hear before starting work
  string prerequisites_warning_text = 5;
  // Ordered list (not any treelike structure) of all nodes inside of a tree.
  repeated TreeNode nodes = 6;
}

// Representation of single node in a Tree.
message TreeNode {
  // Unique ID of the tree
  string id = 1;
  // Index/key of node in the tree
  string node_index = 2;
  // Instructions of the step, pulled directly from the manual.
  string instruction_text = 3;
  // List of troubleshooting options at given step
  repeated TroubleOptions options = 4;
  // Image of the step
  // A URL or relative path to where the multiple media is stored
  repeated string image = 5;
  // The parts mentioned in the step
  repeated string parts = 6;
  // List of notes of the step
  // User defined notes associated with this specific step
  repeated Note notes = 7;
}

// User defined notes.
message TroubleOptions {
  // Condition that needs to be true for next step
  // e.g. "Yes", "No", "On", "Off", "Has fuel", etc.
  string condition = 1;
  // The node_index of the next step
  string destination = 2;
}

// User defined notes.
message Note {
  // Text of the note
  string text = 1;
}

// Input to save a note
message SaveNoteRequest {
  // Text of a note to save
  string text = 1;
  // Step id of a note to save
  string step_id = 2;
}

// Empty response once the note is saved
message SaveNoteResponse {}

// Request for a complete list of all entities.
message ListEntitiesRequest {}

// List of all entities.
// Helpful for fuzzy matching entity names
message ListEntitiesResponse {
  repeated Entity entities = 1;
}

// Input to get an extraction triple about an entity and relation
message GetExtractionRelationshipRequest {
  // Name of entity
  string name = 1;
  // Name of Relation
  string relation = 2;
}

// Output of GetExtractionRelationship.
message GetExtractionRelationshipResponse {
  // The extraction data object.
  Extraction extraction = 1;
}

// Extractions contain Subject-Relation-Object sets. For example,
// subject:"sky", relation:"has color", object:"blue".
message Extraction {
  // Unique ID of the extraction in the knowledge graph.
  string id = 1;
  // The subject of the extraction
  Entity subject = 2;
  // The object of the extraction
  Entity object = 3;
  // The relation of the extraction
  Relation relation = 4;
}

// Input to get an extraction triple about an entity and relation
message GetEntityRequest {
  // Name of entity
  string name = 1;
}

// Output of GetExtractionRelationship.
message GetEntityResponse {
  // The extraction data object.
  Entity entity = 1;
}

// Entities are one of the core information storing blocks in
// the knowledge graph. They can have images or be part of
// extractions. This makes them extremely versitile.
// Entities are used when you want to display information not
// contained in Procedures or Tree. For example, question/answering
// content, details about aircraft parts, etc.
message Entity {
  // Unique ID of the entity in the knowledge graph.
  string id = 1;
  // The text associated with the entity. These are the names we
  // use to lookup an entity.
  Mention mentions = 2;
  // The 'official' name of the entity
  string name = 3;
  // (Optional) A human readable description of the entity
  string description = 4;
  // (Optional) A human readable description of how to find the entity
  string location = 5;
  // (Optional) The page where the information about the entity is found.
  // Often takes the form: "myDocument.PDF#page=17"
  string page = 6;
}

// Relations are the connections between entities. A relation
// can relate to any property. E.g, in the example "The sky
// is blue." the relation is "has color".
message Relation {
  // Unique ID of the mention in the knowledge graph.
  string id = 1;
  // The text associated with the relation
  Mention mentions = 2;
}

// The text asociated with Entities & Relations. If an entity
// has multiple names, there will be one entity but two mentions.
message Mention {
  // Arbitrary text field asociated with Entities & Relations
  repeated string text = 1;
}

// Input to get the entity of an image
message GetEntityImageDataRequest {
  // Id of an entity image
  string id = 1;
}

// Output of get entity image
message GetEntityImageDataResponse {
  // List of images data.
  repeated ImageData image_data_list = 1;
}

// Data related to an image.
message ImageData {
  // Unique ID of an image.
  string id = 1;
  // File path of an image.  Should be sent to the http server to get the actual image.
  string http_path = 2;
  // Caption of an image. i.e. "Figure 4.3: removal of alternator"
  string caption = 3;
}
