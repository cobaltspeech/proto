// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
package cobaltspeech.bluehenge.v1;

import "cobaltspeech/diatheke/v3/diatheke.proto";

service BluehengeService {
  // Returns version information from the server.
  rpc Version(VersionRequest) returns (VersionResponse) {}

  // ListModels returns information about the Bluehenge models
  // the server can access.
  rpc ListModels(ListModelsRequest) returns (ListModelsResponse) {}

  // Create a new Bluehenge session. Also returns a list of
  // actions to take next.
  rpc CreateSession(CreateSessionRequest) returns (CreateSessionResponse) {}

  // Delete the session. Behavior is undefined if the given
  // TokenData is used again after this function is called.
  rpc DeleteSession(DeleteSessionRequest) returns (DeleteSessionResponse) {}

  // Process input for a session and get an updated session with
  // a list of actions to take next. This is the only method
  // that modifies the Bluehenge session state.
  rpc UpdateSession(UpdateSessionRequest) returns (UpdateSessionResponse) {}

  // Create an ASR stream. A result is returned when the
  // stream is closed by the client (which forces the ASR to
  // endpoint), or when a transcript becomes available on its
  // own, in which case the stream is closed by the server.
  // The ASR result may be used in the UpdateSession method.
  // <br/><br/>
  // If the session has a wakeword enabled, and the client
  // application is using Diatheke and Cubic to handle the
  // wakeword processing, this method will not return a
  // result until the wakeword condition has been satisfied.
  // Utterances without the required wakeword will be
  // discarded and no transcription will be returned.
  rpc StreamASR(stream StreamASRRequest) returns (StreamASRResponse) {}

  // Create a TTS stream to receive audio for the given reply.
  // The stream will close when TTS is finished. The client
  // may also close the stream early to cancel the speech
  // synthesis.
  rpc StreamTTS(StreamTTSRequest) returns (stream StreamTTSResponse) {}

  // Create an ASR stream for transcription. Unlike StreamASR,
  // Transcribe does not listen for a wakeword. This method
  // returns a bi-directional stream, and its intended use is
  // for situations where a user may say anything at all, whether
  // it is short or long, and the application wants to save the
  // transcript (e.g., take a note, send a message).
  // <br/><br/>
  // The first message sent to the server must be the TranscribeAction,
  // with remaining messages sending audio data.
  // Messages received from the server will include the current
  // best partial transcription until the full transcription is
  // ready. The stream ends when either the client application
  // closes it, a predefined duration of silence (non-speech)
  // occurs, or the end-transcription intent is recognized.
  rpc Transcribe(stream TranscribeRequest) returns (stream TranscribeResponse) {}

  // It sends an empty request and gets as response a list of all the procedures stored in the knowledge graph
  rpc ListProcedures(ListProceduresRequest) returns (ListProceduresResponse) {}

  // Gets a single procedure identified by id
  rpc GetProcedures(GetProceduresRequest) returns (GetProceduresResponse) {}

  // Saves a note in a specific step during a procedure
  rpc SaveNote(SaveNoteRequest) returns (SaveNoteResponse) {}

  // Gets the data related with an image
  rpc GetEntityImage(GetEntityImageRequest) returns (GetEntityImageResponse) {}

  // Gets a request with an id of the image and sends the image by chunks
  rpc GetImage(GetImageRequest) returns (stream GetImageResponse) {}
}

// Empty request for Bluehenge Version
message VersionRequest {}

// Lists the version of Diatheke and the engines it uses.
message VersionResponse {
  // Bluehenge engine
  string bluehenge = 1;
  // Diatheke Version Response
  cobaltspeech.diatheke.v3.VersionResponse diatheke_version_response = 2;
}

// The top-level message sent by the client for the `ListModels` method.
message ListModelsRequest {
  cobaltspeech.diatheke.v3.ListModelsRequest diatheke_list_models_request = 1;
}

// A list of models available on the Bluehenge server.
message ListModelsResponse {
  cobaltspeech.diatheke.v3.ListModelsResponse diatheke_list_models_response = 1;
}

// The top-level message sent by the client for the `CreateSession` method.
message CreateSessionRequest {
  cobaltspeech.diatheke.v3.CreateSessionRequest diatheke_create_session_request = 1;
}

// The top-level message sent by the server for the `CreateSession` method.
message CreateSessionResponse {
  cobaltspeech.diatheke.v3.CreateSessionResponse diatheke_create_session_response = 1;
}

// The top-level message sent by the client for the `DeleteSession` method.
message DeleteSessionRequest {
  cobaltspeech.diatheke.v3.DeleteSessionRequest diatheke_delete_session_request = 1;
}

// The top-level message sent by the server for the `DeleteSession` method.
message DeleteSessionResponse {
  cobaltspeech.diatheke.v3.DeleteSessionResponse diatheke_delete_session_response = 1;
}

// The top-level message sent by the client for the `UpdateSession` method.
message UpdateSessionRequest {
  cobaltspeech.diatheke.v3.UpdateSessionRequest diatheke_update_session_request = 1;
}

// The top-level message sent by the server for the `UpdateSession` method.
message UpdateSessionResponse {
  cobaltspeech.diatheke.v3.UpdateSessionResponse diatheke_update_session_response = 1;
}

// The top-level message sent by the client for the `StreamASR` method.
message StreamASRRequest {
  cobaltspeech.diatheke.v3.StreamASRRequest diatheke_stream_asr_request = 1;
}

// The top-level message sent by the server for the `StreamASR` method.
message StreamASRResponse {
  cobaltspeech.diatheke.v3.StreamASRResponse diatheke_stream_asr_response = 1;
}

// The top-level message sent by the client for the `StreamTTS` method.
message StreamTTSRequest {
  cobaltspeech.diatheke.v3.StreamTTSRequest diatheke_stream_tts_request = 1;
}

// The top-level message sent by the server for the `StreamTTS` method.
message StreamTTSResponse {
  cobaltspeech.diatheke.v3.StreamTTSResponse diatheke_stream_tts_response = 1;
}

// The top-level message sent by the client for the `Transcribe` method.
message TranscribeRequest {
  cobaltspeech.diatheke.v3.TranscribeRequest diatheke_transcribe_request = 1;
}

// The top-level message sent by the server for the `Transcribe` method.
message TranscribeResponse {
  cobaltspeech.diatheke.v3.TranscribeResponse diatheke_transcribe_response = 1;
}

// Input of the image required
message GetImageRequest {
  // Path of the image
  string relative_path = 1;
}

// Output of the image required
message GetImageResponse {
  // Image given by chunks of bytes
  bytes file_chunk = 1;
}

// Empty request to get the procedures stored in the knowledge graph
message ListProceduresRequest {}

// List of procedures from Gremlin
message ListProceduresResponse {
  // Repeated (list) procedures from Gremlin/knowledge graph
  repeated GetProceduresResponse procedures = 1;
}

// Input to get a single procedure by its id
message GetProceduresRequest {
  // Id to identify a single procedure
  string id = 1;
}

// Procedure from Gremlin
message GetProceduresResponse {
  // Id of the procedure
  string id = 1;
  // Name of the procedure
  string name = 2;
  // Number of the procedure
  string procedure_number = 3;
  // AdditionalNames of the task
  string additional_names = 4; // This will be repeated
  // InputConditions text of the procedure
  string input_conditions = 5; // This will be inputConditions
  // Prerequisites of the procedure
  string prerequisites_warning_text = 6;
  // List of Task data of the procedure
  repeated TaskData tasks = 7;
}

// Data of InputConditions within a procedure
message InputConditionData {
  // Id of the task
  string id = 1;
  // Applicability of the task
  string applicability = 2;
  // RequiredConditions of the task
  string required_conditions = 3;
  // List of personnel of the task
  string personnel = 4; // This will be repeated
  // List of supportEquipment of the task
  string support_equipment = 5; // This will be repeated
  // List of additionalData of the task
  string additional_data = 6; // This will be repeated
}

// Data of tasks within a procedure
message TaskData {
  // Id of the task
  string id = 1;
  // TaskName of the task
  string task_name = 2;
  // TaskNumber of the task
  string task_number = 3;
  // AdditionalNames of the task
  string additional_names = 4; // This will be repeated
  // WarningText of the task
  string warning_text = 5;
  // List of steps of the task
  repeated StepData steps = 6;
}

// Data of steps within a task
message StepData {
  // Id of the step
  string id = 1;
  // Instructions of the step
  string instruction_text = 2;
  // Summary of the step
  string summary_text = 3;
  // DisplayLabelText of the step
  string person = 4;
  // TaskNumber of the step
  string task_number = 5;
  // StepNumber of the step
  string step_number = 6;
  // Image of the step
  string image = 7;
  // List of notes of the step
  repeated Notes notes = 8;
}

// Notes of a step
message Notes {
  // Text of the note
  string text = 1;
}

// Input to save a note
message SaveNoteRequest {
  // Text of a note to save
  string text = 1;
  // Step id of a note to save
  string step_id = 2;
}

// Empty response once the note is saved
message SaveNoteResponse {}

// Input to get the entity of an image
message GetEntityImageRequest {
  // Id of an entity image
  string id = 1;
}

// Output of get entity image
message GetEntityImageResponse {
  // List of images data
  repeated ImageData image_data_list = 1;
}

// Data from an image
message ImageData {
  // Id of an image
  string id = 1;
  //File path of an image
  string file_path = 2;
  // Caption of an image
  string caption = 3;
}
